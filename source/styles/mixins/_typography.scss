/**
 * Some mixins around typegraphy.
 */

// Include font from $font-sets
@mixin font-styles($font-set) {
  $font-properties: map-get($font-sets, $font-set);
  @if $font-properties {
    // Each font-set should be a map of properties
    @each $property, $value in $font-properties {
      #{$property}: $value;
    }
  }
}

// Include property set (such as text, heading) context ($font-contexts)
@mixin context-property-set($context: 'default', $property-set: 'default') {
  $c: map-get($contexts, $context);
  @if $c {
    // Look for the specific font
    $font-properties: map-get($c, $property-set);

    // If map, includ properties
    @if type-of($font-properties) == 'map' {
      @each $property, $value in $font-properties {
        #{$property}: $value;
      }
    } @else if type-of($font-properties) == 'string' {
      @include font-styles($font-properties);
    }
  }
}

// Include a property set for all contexts
@mixin all-contexts($property-set: 'default', $attach: false) {
  @each $context-name, $context in $contexts {
    // Handle the default
    @if $context-name == 'default' {
      @include context-property-set($context-name, $property-set);
    } @else {
      @if $attach {
        &.context-#{$context-name} {
          @include context-property-set($context-name, $property-set);
        }
      } @else {
        .context-#{$context-name} & {
          @include context-property-set($context-name, $property-set);
        }
      }
    }
  }
}
